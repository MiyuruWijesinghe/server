/*
 * Generated By Spring Data JPA Entity Generator
 * @author Niroshan Mendis
 */

package bit.project.server.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Data
@Entity
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    //@NotNull(message="Code is required")
    @Size(min = 10, max = 10, message = "Character count should be 8")
    private String code;

    @Size(min = 0, max = 255, message = "Maximum character count is 255")
    private String callingname;

    @Size(min = 0, max = 255, message = "Maximum character count is 255")
    private String fullname;

    private LocalDate dobirth;

    @NotNull(message = "NIC is required")
    @Size(min = 0, max = 12, message = "Maximum character count is 12")
    private String nic;

    @Lob
    @Size(min = 0, max = 65535, message = "Maximum character count is 65535")
    private String address;

    @Size(min = 10, max = 10, message = "Character count should be 10")
    private String mobile;

    @Size(min = 10, max = 10, message = "Character count should be 10")
    private String land;

    @Lob
    @Size(min = 0, max = 65535, message = "Maximum character count is 65535")
    private String description;

    private LocalDate dorecruite;

    private String photo;

    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    private LocalDateTime tocreation;

    @ManyToOne(optional = false)
    private Gender gender;

    @ManyToOne(optional = false)
    private Civilstatus civilstatus;

    @ManyToOne(optional = false)
    private Designation designation;

    @ManyToOne(optional = false)
    private Employeestatus employeestatus;

    @ManyToOne(optional = false)
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    private User creator;

    @ManyToOne(optional = false)
    private Nametitle nametitle;

    @Size(min = 0, max = 255, message = "Maximum character count is 255")
    private String email;

    @JsonIgnore
    @OneToMany(mappedBy = "employee")
    private List<User> userList;


    @ManyToOne(optional = false)
    private Branch branch;

    public Employee(Integer id) {
        this.id = id;
    }

    public Employee(Integer id, String code, String callingname, Nametitle nametitle) {
        this.id = id;
        this.code = code;
        this.callingname = callingname;
        this.nametitle = nametitle;
    }

}
